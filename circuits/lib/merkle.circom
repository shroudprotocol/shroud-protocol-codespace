pragma circom 2.0.0;
include "./bitify.circom";
template MerkleProof(nLevels) { signal input leaf; signal input pathElements[nLevels]; signal input pathIndices[nLevels]; signal output root; component hashers[nLevels]; for (var i = 0; i < nLevels; i++) { hashers[i] = Poseidon(2); } signal intermediateNodes[nLevels]; component pathIndicesBits[nLevels]; for (var i = 0; i < nLevels; i++) { pathIndicesBits[i] = Num2Bits(1); pathIndicesBits[i].in <== pathIndices[i]; } hashers[0].inputs[0] <== (leaf - pathElements[0]) * pathIndicesBits[0].out[0] + pathElements[0]; hashers[0].inputs[1] <== (pathElements[0] - leaf) * pathIndicesBits[0].out[0] + leaf; intermediateNodes[0] <== hashers[0].out; for (var i = 1; i < nLevels; i++) { hashers[i].inputs[0] <== (intermediateNodes[i-1] - pathElements[i]) * pathIndicesBits[i].out[0] + pathElements[i]; hashers[i].inputs[1] <== (pathElements[i] - intermediateNodes[i-1]) * pathIndicesBits[i].out[0] + intermediateNodes[i-1]; intermediateNodes[i] <== hashers[i].out; } root <== intermediateNodes[nLevels - 1]; }